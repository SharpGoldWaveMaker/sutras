{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@shikijs+transformers@1.3.0/node_modules/@shikijs/transformers/dist/index.mjs"],
  "sourcesContent": ["function separateContinuousSpaces(inputs) {\n  const result = [];\n  let current = \"\";\n  function bump() {\n    if (current.length)\n      result.push(current);\n    current = \"\";\n  }\n  inputs.forEach((part, idx) => {\n    if (isTab(part)) {\n      bump();\n      result.push(part);\n    } else if (isSpace(part) && (isSpace(inputs[idx - 1]) || isSpace(inputs[idx + 1]))) {\n      bump();\n      result.push(part);\n    } else {\n      current += part;\n    }\n  });\n  bump();\n  return result;\n}\nfunction isTab(part) {\n  return part === \"\t\";\n}\nfunction isSpace(part) {\n  return part === \" \" || part === \"\t\";\n}\nfunction splitSpaces(parts, type, renderContinuousSpaces = true) {\n  if (type === \"all\")\n    return parts;\n  let leftCount = 0;\n  let rightCount = 0;\n  if (type === \"boundary\") {\n    for (let i = 0; i < parts.length; i++) {\n      if (isSpace(parts[i]))\n        leftCount++;\n      else\n        break;\n    }\n  }\n  if (type === \"boundary\" || type === \"trailing\") {\n    for (let i = parts.length - 1; i >= 0; i--) {\n      if (isSpace(parts[i]))\n        rightCount++;\n      else\n        break;\n    }\n  }\n  const middle = parts.slice(leftCount, parts.length - rightCount);\n  return [\n    ...parts.slice(0, leftCount),\n    ...renderContinuousSpaces ? separateContinuousSpaces(middle) : [middle.join(\"\")],\n    ...parts.slice(parts.length - rightCount)\n  ];\n}\n\nfunction transformerRenderWhitespace(options = {}) {\n  const classMap = {\n    \" \": options.classSpace ?? \"space\",\n    \"\t\": options.classTab ?? \"tab\"\n  };\n  const position = options.position ?? \"all\";\n  const keys = Object.keys(classMap);\n  return {\n    name: \"@shikijs/transformers:render-whitespace\",\n    // We use `root` hook here to ensure it runs after all other transformers\n    root(root) {\n      const pre = root.children[0];\n      const code = pre.children[0];\n      code.children.forEach(\n        (line) => {\n          if (line.type !== \"element\")\n            return;\n          const elements = line.children.filter((token) => token.type === \"element\");\n          const last = elements.length - 1;\n          line.children = line.children.flatMap((token) => {\n            if (token.type !== \"element\")\n              return token;\n            const index = elements.indexOf(token);\n            if (position === \"boundary\" && index !== 0 && index !== last)\n              return token;\n            if (position === \"trailing\" && index !== last)\n              return token;\n            const node = token.children[0];\n            if (node.type !== \"text\" || !node.value)\n              return token;\n            const parts = splitSpaces(\n              node.value.split(/([ \\t])/).filter((i) => i.length),\n              position === \"boundary\" && index === last && last !== 0 ? \"trailing\" : position,\n              position !== \"trailing\"\n            );\n            if (parts.length <= 1)\n              return token;\n            return parts.map((part) => {\n              const clone = {\n                ...token,\n                properties: { ...token.properties }\n              };\n              clone.children = [{ type: \"text\", value: part }];\n              if (keys.includes(part)) {\n                this.addClassToHast(clone, classMap[part]);\n                delete clone.properties.style;\n              }\n              return clone;\n            });\n          });\n        }\n      );\n    }\n  };\n}\n\nfunction transformerRemoveLineBreak() {\n  return {\n    name: \"@shikijs/transformers:remove-line-break\",\n    code(code) {\n      code.children = code.children.filter((line) => !(line.type === \"text\" && line.value === \"\\n\"));\n    }\n  };\n}\n\nfunction transformerCompactLineOptions(lineOptions = []) {\n  return {\n    name: \"@shikijs/transformers:compact-line-options\",\n    line(node, line) {\n      const lineOption = lineOptions.find((o) => o.line === line);\n      if (lineOption?.classes)\n        this.addClassToHast(node, lineOption.classes);\n      return node;\n    }\n  };\n}\n\nfunction createCommentNotationTransformer(name, regex, onMatch, removeEmptyLines = false) {\n  return {\n    name,\n    code(code) {\n      const lines = code.children.filter((i) => i.type === \"element\");\n      const linesToRemove = [];\n      lines.forEach((line, idx) => {\n        let nodeToRemove;\n        for (const child of line.children) {\n          if (child.type !== \"element\")\n            continue;\n          const text = child.children[0];\n          if (text.type !== \"text\")\n            continue;\n          let replaced = false;\n          text.value = text.value.replace(regex, (...match) => {\n            if (onMatch.call(this, match, line, child, lines, idx)) {\n              replaced = true;\n              return \"\";\n            }\n            return match[0];\n          });\n          if (replaced && !text.value.trim())\n            nodeToRemove = child;\n        }\n        if (nodeToRemove) {\n          line.children.splice(line.children.indexOf(nodeToRemove), 1);\n          if (line.children.length === 0) {\n            linesToRemove.push(line);\n            if (removeEmptyLines) {\n              const next = code.children[code.children.indexOf(line) + 1];\n              if (next && next.type === \"text\" && next.value === \"\\n\")\n                linesToRemove.push(next);\n            }\n          }\n        }\n      });\n      for (const line of linesToRemove)\n        code.children.splice(code.children.indexOf(line), 1);\n    }\n  };\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction transformerNotationMap(options = {}, name = \"@shikijs/transformers:notation-map\") {\n  const {\n    classMap = {},\n    classActivePre = void 0\n  } = options;\n  return createCommentNotationTransformer(\n    name,\n    new RegExp(`\\\\s*(?://|/\\\\*|<!--|#)\\\\s+\\\\[!code (${Object.keys(classMap).map(escapeRegExp).join(\"|\")})(:\\\\d+)?\\\\]\\\\s*(?:\\\\*/|-->)?`),\n    function([_, match, range = \":1\"], _line, _comment, lines, index) {\n      const lineNum = Number.parseInt(range.slice(1), 10);\n      lines.slice(index, index + lineNum).forEach((line) => {\n        this.addClassToHast(line, classMap[match]);\n      });\n      if (classActivePre)\n        this.addClassToHast(this.pre, classActivePre);\n      return true;\n    }\n  );\n}\n\nfunction transformerNotationFocus(options = {}) {\n  const {\n    classActiveLine = \"focused\",\n    classActivePre = \"has-focused\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        focus: classActiveLine\n      },\n      classActivePre\n    },\n    \"@shikijs/transformers:notation-focus\"\n  );\n}\n\nfunction transformerNotationHighlight(options = {}) {\n  const {\n    classActiveLine = \"highlighted\",\n    classActivePre = \"has-highlighted\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        highlight: classActiveLine,\n        hl: classActiveLine\n      },\n      classActivePre\n    },\n    \"@shikijs/transformers:notation-highlight\"\n  );\n}\n\nfunction highlightWordInLine(line, ignoredElement, word, className) {\n  const content = getTextContent(line);\n  let index = content.indexOf(word);\n  while (index !== -1) {\n    highlightRange.call(this, line.children, ignoredElement, index, word.length, className);\n    index = content.indexOf(word, index + 1);\n  }\n}\nfunction getTextContent(element) {\n  if (element.type === \"text\")\n    return element.value;\n  if (element.type === \"element\" && element.tagName === \"span\")\n    return element.children.map(getTextContent).join(\"\");\n  return \"\";\n}\nfunction highlightRange(elements, ignoredElement, index, len, className) {\n  let currentIdx = 0;\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    if (element.type !== \"element\" || element.tagName !== \"span\" || element === ignoredElement)\n      continue;\n    const textNode = element.children[0];\n    if (textNode.type !== \"text\")\n      continue;\n    if (hasOverlap([currentIdx, currentIdx + textNode.value.length - 1], [index, index + len])) {\n      const start = Math.max(0, index - currentIdx);\n      const length = len - Math.max(0, currentIdx - index);\n      if (length === 0)\n        continue;\n      const separated = separateToken(element, textNode, start, length);\n      this.addClassToHast(separated[1], className);\n      const output = separated.filter(Boolean);\n      elements.splice(i, 1, ...output);\n      i += output.length - 1;\n    }\n    currentIdx += textNode.value.length;\n  }\n}\nfunction hasOverlap(range1, range2) {\n  return range1[0] <= range2[1] && range1[1] >= range2[0];\n}\nfunction separateToken(span, textNode, index, len) {\n  const text = textNode.value;\n  const createNode = (value) => inheritElement(span, {\n    children: [\n      {\n        type: \"text\",\n        value\n      }\n    ]\n  });\n  return [\n    index > 0 ? createNode(text.slice(0, index)) : void 0,\n    createNode(text.slice(index, index + len)),\n    index + len < text.length ? createNode(text.slice(index + len)) : void 0\n  ];\n}\nfunction inheritElement(original, overrides) {\n  return {\n    ...original,\n    properties: {\n      ...original.properties\n    },\n    ...overrides\n  };\n}\n\nfunction transformerNotationWordHighlight(options = {}) {\n  const {\n    classActiveWord = \"highlighted-word\",\n    classActivePre = void 0\n  } = options;\n  return createCommentNotationTransformer(\n    \"@shikijs/transformers:notation-highlight-word\",\n    // comment-start             | marker    | word           | range | comment-end\n    /^\\s*(?:\\/\\/|\\/\\*|<!--|#)\\s+\\[!code word:((?:\\\\.|[^:\\]])+)(:\\d+)?\\]\\s*(?:\\*\\/|-->)?/,\n    function([_, word, range], _line, comment, lines, index) {\n      const lineNum = range ? Number.parseInt(range.slice(1), 10) : lines.length;\n      word = word.replace(/\\\\(.)/g, \"$1\");\n      lines.slice(index + 1, index + 1 + lineNum).forEach((line) => highlightWordInLine.call(this, line, comment, word, classActiveWord));\n      if (classActivePre)\n        this.addClassToHast(this.pre, classActivePre);\n      return true;\n    },\n    true\n    // remove empty lines\n  );\n}\n\nfunction parseMetaHighlightWords(meta) {\n  if (!meta)\n    return [];\n  const match = Array.from(meta.matchAll(/\\/((?:\\\\.|[^\\/])+?)\\//ig));\n  return match.map((v) => v[1].replace(/\\\\(.)/g, \"$1\"));\n}\nfunction transformerMetaWordHighlight(options = {}) {\n  const {\n    className = \"highlighted-word\"\n  } = options;\n  return {\n    name: \"@shikijs/transformers:meta-word-highlight\",\n    preprocess(code, options2) {\n      if (!this.options.meta?.__raw)\n        return;\n      const words = parseMetaHighlightWords(this.options.meta.__raw);\n      options2.decorations || (options2.decorations = []);\n      for (const word of words) {\n        const indexes = findAllSubstringIndexes(code, word);\n        for (const index of indexes) {\n          options2.decorations.push({\n            start: index,\n            end: index + word.length,\n            properties: {\n              class: className\n            }\n          });\n        }\n      }\n    }\n  };\n}\nfunction findAllSubstringIndexes(str, substr) {\n  const indexes = [];\n  let i = -1;\n  while ((i = str.indexOf(substr, i + 1)) !== -1)\n    indexes.push(i);\n  return indexes;\n}\n\nfunction transformerNotationDiff(options = {}) {\n  const {\n    classLineAdd = \"diff add\",\n    classLineRemove = \"diff remove\",\n    classActivePre = \"has-diff\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        \"++\": classLineAdd,\n        \"--\": classLineRemove\n      },\n      classActivePre\n    },\n    \"@shikijs/transformers:notation-diff\"\n  );\n}\n\nfunction transformerNotationErrorLevel(options = {}) {\n  const {\n    classMap = {\n      error: [\"highlighted\", \"error\"],\n      warning: [\"highlighted\", \"warning\"]\n    },\n    classActivePre = \"has-highlighted\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap,\n      classActivePre\n    },\n    \"@shikijs/transformers:notation-error-level\"\n  );\n}\n\nfunction parseMetaHighlightString(meta) {\n  if (!meta)\n    return null;\n  const match = meta.match(/{([\\d,-]+)}/);\n  if (!match)\n    return null;\n  const lines = match[1].split(\",\").flatMap((v) => {\n    const num = v.split(\"-\").map((v2) => Number.parseInt(v2, 10));\n    if (num.length === 1)\n      return [num[0]];\n    else\n      return Array.from({ length: num[1] - num[0] + 1 }, (_, i) => i + num[0]);\n  });\n  return lines;\n}\nconst symbol = Symbol(\"highlighted-lines\");\nfunction transformerMetaHighlight(options = {}) {\n  const {\n    className = \"highlighted\"\n  } = options;\n  return {\n    name: \"@shikijs/transformers:meta-highlight\",\n    line(node, line) {\n      var _a;\n      if (!this.options.meta?.__raw)\n        return;\n      (_a = this.meta)[symbol] || (_a[symbol] = parseMetaHighlightString(this.options.meta.__raw));\n      const lines = this.meta[symbol] || [];\n      if (lines.includes(line))\n        this.addClassToHast(node, className);\n      return node;\n    }\n  };\n}\n\nexport { createCommentNotationTransformer, parseMetaHighlightString, parseMetaHighlightWords, transformerCompactLineOptions, transformerMetaHighlight, transformerMetaWordHighlight, transformerNotationDiff, transformerNotationErrorLevel, transformerNotationFocus, transformerNotationHighlight, transformerNotationWordHighlight, transformerRemoveLineBreak, transformerRenderWhitespace };\n"],
  "mappings": "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",
  "names": ["_a"]
}
