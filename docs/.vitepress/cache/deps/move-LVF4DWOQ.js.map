{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/shiki@1.3.0/node_modules/shiki/dist/langs/move.mjs"],
  "sourcesContent": ["const lang = Object.freeze({ \"displayName\": \"Move\", \"name\": \"move\", \"patterns\": [{ \"include\": \"#address\" }, { \"include\": \"#comments\" }, { \"include\": \"#module\" }, { \"include\": \"#script\" }, { \"include\": \"#attributes\" }], \"repository\": { \"=== DEPRECATED_BELOW ===\": {}, \"abilities\": { \"comment\": \"Ability\", \"match\": \"\\\\b(store|key|drop|copy)\\\\b\", \"name\": \"support.type.ability.move\" }, \"address\": { \"begin\": \"\\\\b(address)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.address.keyword.move\" } }, \"comment\": \"Address block\", \"end\": \"(?<=})\", \"name\": \"meta.address_block.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"begin\": \"(?<=address)\", \"comment\": \"Address value/const\", \"end\": \"(?=[{])\", \"name\": \"meta.address.definition.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#address_literal\" }, { \"comment\": \"Named Address\", \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"entity.name.type.move\" }] }, { \"include\": \"#module\" }] }, \"as\": { \"comment\": \"Keyword as (highlighted)\", \"match\": \"\\\\b(as)\\\\b\", \"name\": \"keyword.control.as.move\" }, \"as-import\": { \"comment\": \"Keyword as in import statement; not highlighted\", \"match\": \"\\\\b(as)\\\\b\", \"name\": \"meta.import.as.move\" }, \"attributes\": { \"match\": '#\\\\[(?:[\\\\w0-9=,_\\\\(\\\\)\\\\s\"\\\\:=]+)\\\\]', \"name\": \"support.constant.attribute.move\" }, \"block\": { \"begin\": \"{\", \"comment\": \"Block expression or definition\", \"end\": \"}\", \"name\": \"meta.block.move\", \"patterns\": [{ \"include\": \"#expr\" }] }, \"block-comments\": { \"comment\": \"Supported since https://github.com/diem/diem/pull/3714\", \"patterns\": [{ \"begin\": \"/\\\\*[\\\\*!](?![\\\\*/])\", \"comment\": \"Block documentation comment\", \"end\": \"\\\\*/\", \"name\": \"comment.block.documentation.move\" }, { \"begin\": \"/\\\\*\", \"comment\": \"Block comment\", \"end\": \"\\\\*/\", \"name\": \"comment.block.move\" }] }, \"capitalized\": { \"comment\": \"MyType - capitalized type name\", \"match\": \"\\\\b([A-Z][a-zA-Z_0-9]*)\\\\b\", \"name\": \"entity.name.type.use.move\" }, \"comments\": { \"name\": \"meta.comments.move\", \"patterns\": [{ \"include\": \"#line-comments\" }, { \"include\": \"#block-comments\" }] }, \"const\": { \"begin\": \"\\\\b(const)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.const.move\" } }, \"end\": \";\", \"name\": \"meta.const.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#primitives\" }, { \"include\": \"#literals\" }, { \"match\": \"\\\\b([\\\\w_]+)\\\\b\", \"name\": \"constant.other.move\" }] }, \"control\": { \"comment\": \"Control flow\", \"match\": \"\\\\b(return|while|loop|if|else|break|continue|abort)\\\\b\", \"name\": \"keyword.control.move\" }, \"entry\": { \"comment\": \"entry\", \"match\": \"\\\\b(entry)\\\\b\", \"name\": \"storage.modifier.visibility.entry.move\" }, \"enum\": { \"begin\": \"\\\\b(enum)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.enum.move\" } }, \"comment\": \"Enum syntax\", \"end\": \"(?<=})\", \"name\": \"meta.enum.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#type_param\" }, { \"comment\": \"Enum name (ident)\", \"match\": \"\\\\b[A-Z][a-zA-Z_0-9]*\\\\b\", \"name\": \"entity.name.type.enum.move\" }, { \"include\": \"#has\" }, { \"include\": \"#abilities\" }, { \"begin\": \"{\", \"end\": \"}\", \"name\": \"meta.enum.definition.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"begin\": \"\\\\(\", \"end\": \"\\\\)\", \"name\": \"meta.enum.tuple.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#types\" }] }, { \"begin\": \"{\", \"end\": \"}\", \"name\": \"meta.enum.struct.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#types\" }] }] }] }, \"error_const\": { \"match\": \"\\\\b(E[A-Z][A-Za-z_]*)\\\\b\", \"name\": \"variable.language.error.move\" }, \"escaped_identifier\": { \"begin\": \"`\", \"comment\": \"Escaped variable\", \"end\": \"`\", \"name\": \"variable.language.escaped.move\" }, \"expr\": { \"comment\": \"Aggregate Expression\", \"name\": \"meta.expression.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#expr_generic\" }, { \"include\": \"#error_const\" }, { \"include\": \"#packed_field\" }, { \"include\": \"#import\" }, { \"include\": \"#as\" }, { \"include\": \"#mut\" }, { \"include\": \"#let\" }, { \"include\": \"#literals\" }, { \"include\": \"#control\" }, { \"include\": \"#move_copy\" }, { \"include\": \"#resource_methods\" }, { \"include\": \"#self_access\" }, { \"include\": \"#module_access\" }, { \"include\": \"#label\" }, { \"include\": \"#macro_call\" }, { \"include\": \"#local_call\" }, { \"include\": \"#method_call\" }, { \"include\": \"#path_access\" }, { \"match\": \"\\\\$(?=[a-z])\", \"name\": \"keyword.operator.macro.dollar.move\" }, { \"match\": \"(?<=[$])[a-z][A-Z_0-9a-z]*\", \"name\": \"variable.other.meta.move\" }, { \"comment\": \"ALL_CONST_CAPS\", \"match\": \"\\\\b([A-Z][A-Z_]+)\\\\b\", \"name\": \"constant.other.move\" }, { \"comment\": \"CustomType\", \"match\": \"\\\\b([A-Z][a-zA-Z_0-9]*)\\\\b\", \"name\": \"entity.name.type.move\" }, { \"include\": \"#paren\" }, { \"include\": \"#block\" }] }, \"expr_generic\": { \"begin\": \"<(?=([\\\\sa-z_,0-9A-Z<>]+>))\", \"comment\": \"< angle brackets >\", \"end\": \">\", \"name\": \"meta.expression.generic.type.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#types\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#expr_generic\" }] }, \"friend\": { \"begin\": \"\\\\b(friend)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"end\": \";\", \"name\": \"meta.friend.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#address_literal\" }, { \"comment\": \"Name of the imported module\", \"match\": \"\\\\b([a-zA-Z][A-Za-z_0-9]*)\\\\b\", \"name\": \"entity.name.type.module.move\" }] }, \"fun\": { \"patterns\": [{ \"include\": \"#fun_signature\" }, { \"include\": \"#block\" }] }, \"fun_body\": { \"begin\": \"{\", \"comment\": \"Function body\", \"end\": \"(?<=})\", \"name\": \"meta.fun_body.move\", \"patterns\": [{ \"include\": \"#expr\" }] }, \"fun_call\": { \"begin\": \"\\\\b(\\\\w+)\\\\s*(?:<[\\\\w\\\\s,]+>)?\\\\s*[(]\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.call.move\" } }, \"comment\": \"Function call\", \"end\": \"[)]\", \"name\": \"meta.fun_call.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#resource_methods\" }, { \"include\": \"#self_access\" }, { \"include\": \"#module_access\" }, { \"include\": \"#move_copy\" }, { \"include\": \"#literals\" }, { \"include\": \"#fun_call\" }, { \"include\": \"#block\" }, { \"include\": \"#mut\" }, { \"include\": \"#as\" }] }, \"fun_signature\": { \"begin\": \"\\\\b(fun)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.fun.move\" } }, \"comment\": \"Function signature\", \"end\": \"(?=[;{])\", \"name\": \"meta.fun_signature.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#module_access\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }, { \"include\": \"#mut\" }, { \"begin\": \"(?<=fun)\", \"comment\": \"Function name\", \"end\": \"(?=[<(])\", \"name\": \"meta.function_name.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"entity.name.function.move\" }] }, { \"include\": \"#type_param\" }, { \"begin\": \"[(]\", \"comment\": \"Parentheses\", \"end\": \"[)]\", \"name\": \"meta.parentheses.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#self_access\" }, { \"include\": \"#expr_generic\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#module_access\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }, { \"include\": \"#mut\" }] }, { \"comment\": \"Keyword acquires\", \"match\": \"\\\\b(acquires)\\\\b\", \"name\": \"storage.modifier\" }] }, \"has\": { \"comment\": \"Has Abilities\", \"match\": \"\\\\b(has)\\\\b\", \"name\": \"keyword.control.ability.has.move\" }, \"ident\": { \"match\": \"\\\\b([a-zA-Z][A-Z_a-z0-9]*)\\\\b\", \"name\": \"meta.identifier.move\" }, \"import\": { \"begin\": \"\\\\b(use)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"end\": \";\", \"name\": \"meta.import.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#use_fun\" }, { \"include\": \"#address_literal\" }, { \"include\": \"#as-import\" }, { \"comment\": \"Uppercase entities\", \"match\": \"\\\\b([A-Z]\\\\w*)\\\\b\", \"name\": \"entity.name.type.move\" }, { \"begin\": \"{\", \"comment\": \"Module members\", \"end\": \"}\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#as-import\" }, { \"comment\": \"Uppercase entities\", \"match\": \"\\\\b([A-Z]\\\\w*)\\\\b\", \"name\": \"entity.name.type.move\" }] }, { \"comment\": \"Name of the imported module\", \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"meta.entity.name.type.module.move\" }] }, \"label\": { \"comment\": \"Label\", \"match\": \"'[a-z][a-z_0-9]*\", \"name\": \"string.quoted.single.label.move\" }, \"let\": { \"comment\": \"Keyword let\", \"match\": \"\\\\b(let)\\\\b\", \"name\": \"keyword.control.move\" }, \"line-comments\": { \"begin\": \"//\", \"comment\": \"Single-line comment\", \"end\": \"$\", \"name\": \"comment.line.double-slash.move\" }, \"literals\": { \"comment\": \"Literals supported in Move\", \"name\": \"meta.literal.move\", \"patterns\": [{ \"comment\": \"base16 address literal\", \"match\": \"@0x[A-F0-9a-f]+\", \"name\": \"support.constant.address.base16.move\" }, { \"comment\": \"named address literal @[ident]\", \"match\": \"@[a-zA-Z][a-zA-Z_0-9]*\", \"name\": \"support.constant.address.name.move\" }, { \"comment\": \"Hex literal\", \"match\": \"0x[_a-fA-F0-9]+(?:u(?:8|16|32|64|128|256))?\", \"name\": \"constant.numeric.hex.move\" }, { \"comment\": \"Numeric literal\", \"match\": \"(?<!(?:\\\\w|(?:(?<!\\\\.)\\\\.)))[0-9][_0-9]*(?:\\\\.(?!\\\\.)(?:[0-9][_0-9]*)?)?(?:[eE][+\\\\-]?[_0-9]+)?(?:[u](?:8|16|32|64|128|256))?\", \"name\": \"constant.numeric.move\" }, { \"begin\": '\\\\bb\"', \"comment\": \"vector ascii bytestring literal\", \"end\": '\"', \"name\": \"meta.vector.literal.ascii.move\", \"patterns\": [{ \"comment\": \"Special symbol escape\", \"match\": '\\\\\\\\[nrt\\\\0\"]', \"name\": \"constant.character.escape.move\" }, { \"comment\": \"HEX Escape\", \"match\": \"\\\\\\\\x[a-fA-F0-9][A-Fa-f0-9]\", \"name\": \"constant.character.escape.hex.move\" }, { \"comment\": \"ASCII Character\", \"match\": \"[\\\\x00-\\\\x7F]\", \"name\": \"string.quoted.double.raw.move\" }] }, { \"begin\": 'x\"', \"comment\": \"vector hex literal\", \"end\": '\"', \"name\": \"meta.vector.literal.hex.move\", \"patterns\": [{ \"comment\": \"vector hex literal\", \"match\": \"[A-Fa-f0-9]+\", \"name\": \"constant.character.move\" }] }, { \"comment\": \"bool literal\", \"match\": \"\\\\b(?:true|false)\\\\b\", \"name\": \"constant.language.boolean.move\" }, { \"begin\": \"vector\\\\[\", \"comment\": \"vector literal (macro?)\", \"end\": \"\\\\]\", \"name\": \"meta.vector.literal.macro.move\", \"patterns\": [{ \"include\": \"#expr\" }] }] }, \"local_call\": { \"comment\": \"call to a local / imported fun\", \"match\": \"\\\\b([a-z][_a-z0-9]*)(?=[<\\\\(])\", \"name\": \"entity.name.function.call.local.move\" }, \"macro\": { \"begin\": \"\\\\b(macro)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.macro.move\" } }, \"comment\": \"macro fun [ident] {}\", \"end\": \"(?<=})\", \"name\": \"meta.macro.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#fun\" }] }, \"macro_call\": { \"captures\": { \"2\": { \"name\": \"support.function.macro.move\" } }, \"comment\": \"Macro fun call\", \"match\": \"(\\\\b|\\\\.)([a-z][A-Za-z0-9_]*)!\", \"name\": \"meta.macro.call\" }, \"method_call\": { \"captures\": { \"1\": { \"name\": \"entity.name.function.call.path.move\" } }, \"comment\": \"<expr>.[ident]<>?() call\", \"match\": \"\\\\.([a-z][_a-z0-9]*)(?=[<\\\\(])\", \"name\": \"meta.path.call.move\" }, \"module\": { \"begin\": \"\\\\b(module|spec)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"comment\": \"Module definition\", \"end\": \"(?<=})\", \"name\": \"meta.module.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"begin\": \"(?<=(module|spec))\", \"comment\": \"Module name\", \"end\": \"(?={)\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"begin\": \"(?<=(module|spec))\", \"comment\": \"Module namespace / address\", \"end\": \"(?=[(::){])\", \"name\": \"constant.other.move\" }, { \"begin\": \"(?<=::)\", \"comment\": \"Module name\", \"end\": \"(?=[\\\\s{])\", \"name\": \"entity.name.type.move\" }] }, { \"begin\": \"{\", \"comment\": \"Module scope\", \"end\": \"}\", \"name\": \"meta.module_scope.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#attributes\" }, { \"include\": \"#entry\" }, { \"include\": \"#public-scope\" }, { \"include\": \"#public\" }, { \"include\": \"#native\" }, { \"include\": \"#import\" }, { \"include\": \"#friend\" }, { \"include\": \"#const\" }, { \"include\": \"#struct\" }, { \"include\": \"#enum\" }, { \"include\": \"#macro\" }, { \"include\": \"#fun\" }, { \"include\": \"#spec\" }, { \"include\": \"#block\" }] }] }, \"module_access\": { \"captures\": { \"1\": { \"name\": \"meta.entity.name.type.accessed.module.move\" }, \"2\": { \"name\": \"entity.name.function.call.move\" } }, \"comment\": \"Use of module type or method\", \"match\": \"\\\\b(\\\\w+)::(\\\\w+)\\\\b\", \"name\": \"meta.module_access.move\" }, \"move_copy\": { \"comment\": \"Keywords move and copy\", \"match\": \"\\\\b(move|copy)\\\\b\", \"name\": \"variable.language.move\" }, \"mut\": { \"comment\": \"Mutable reference and let mut\", \"match\": \"\\\\b(mut)\\\\b\", \"name\": \"storage.modifier.mut.move\" }, \"native\": { \"comment\": \"native\", \"match\": \"\\\\b(native)\\\\b\", \"name\": \"storage.modifier.visibility.native.move\" }, \"packed_field\": { \"comment\": \"[ident]: \", \"match\": \"[a-z][a-z0-9_]+\\\\s*:\\\\s*(?=\\\\s)\", \"name\": \"meta.struct.field.move\" }, \"paren\": { \"begin\": \"\\\\(\", \"end\": \"\\\\)\", \"name\": \"meta.paren.move\", \"patterns\": [{ \"include\": \"#expr\" }] }, \"path_access\": { \"comment\": \"<expr>.[ident] access\", \"match\": \"\\\\.[a-z][_a-z0-9]*\\\\b\", \"name\": \"meta.path.access.move\" }, \"phantom\": { \"comment\": \"Keyword phantom inside type parameters\", \"match\": \"\\\\b(phantom)\\\\b\", \"name\": \"keyword.control.phantom.move\" }, \"primitives\": { \"comment\": \"Primitive types\", \"match\": \"\\\\b(u8|u16|u32|u64|u128|u256|address|bool|signer)\\\\b\", \"name\": \"support.type.primitives.move\" }, \"public\": { \"comment\": \"public\", \"match\": \"\\\\b(public)\\\\b\", \"name\": \"storage.modifier.visibility.public.move\" }, \"public-scope\": { \"begin\": \"(?<=(public))\\\\s*\\\\(\", \"comment\": \"public (friend/script/package)\", \"end\": \"\\\\)\", \"name\": \"meta.public.scoped.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"match\": \"\\\\b(friend|script|package)\\\\b\", \"name\": \"keyword.control.public.scope.move\" }] }, \"resource_methods\": { \"comment\": \"Methods to work with resource\", \"match\": \"\\\\b(borrow_global|borrow_global_mut|exists|move_from|move_to_sender|move_to)\\\\b\", \"name\": \"support.function.typed.move\" }, \"script\": { \"begin\": \"\\\\b(script)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.script.move\" } }, \"end\": \"(?<=})\", \"name\": \"meta.script.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"begin\": \"{\", \"comment\": \"Script scope\", \"end\": \"}\", \"name\": \"meta.script_scope.move\", \"patterns\": [{ \"include\": \"#const\" }, { \"include\": \"#comments\" }, { \"include\": \"#import\" }, { \"include\": \"#fun\" }] }] }, \"self_access\": { \"captures\": { \"1\": { \"name\": \"variable.language.self.move\" }, \"2\": { \"name\": \"entity.name.function.call.move\" } }, \"comment\": \"Use of Self\", \"match\": \"\\\\b(Self)::(\\\\w+)\\\\b\", \"name\": \"meta.self_access.move\" }, \"spec\": { \"begin\": \"\\\\b(spec)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.spec.move\" } }, \"end\": \"(?<=[;}])\", \"name\": \"meta.spec.move\", \"patterns\": [{ \"comment\": \"Spec target\", \"match\": \"\\\\b(module|schema|struct|fun)\", \"name\": \"storage.modifier.spec.target.move\" }, { \"comment\": \"Spec define inline\", \"match\": \"\\\\b(define)\", \"name\": \"storage.modifier.spec.define.move\" }, { \"comment\": \"Target name\", \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"entity.name.function.move\" }, { \"begin\": \"{\", \"comment\": \"Spec block\", \"end\": \"}\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#spec_block\" }, { \"include\": \"#spec_types\" }, { \"include\": \"#spec_define\" }, { \"include\": \"#spec_keywords\" }, { \"include\": \"#control\" }, { \"include\": \"#fun_call\" }, { \"include\": \"#literals\" }, { \"include\": \"#types\" }, { \"include\": \"#let\" }] }] }, \"spec_block\": { \"begin\": \"{\", \"comment\": \"Spec block\", \"end\": \"}\", \"name\": \"meta.spec_block.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#spec_block\" }, { \"include\": \"#spec_types\" }, { \"include\": \"#fun_call\" }, { \"include\": \"#literals\" }, { \"include\": \"#control\" }, { \"include\": \"#types\" }, { \"include\": \"#let\" }] }, \"spec_define\": { \"begin\": \"\\\\b(define)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.move.spec\" } }, \"comment\": \"Spec define keyword\", \"end\": \"(?=[;{])\", \"name\": \"meta.spec_define.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#spec_types\" }, { \"include\": \"#types\" }, { \"begin\": \"(?<=define)\", \"comment\": \"Function name\", \"end\": \"(?=[(])\", \"patterns\": [{ \"include\": \"#comments\" }, { \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"entity.name.function.move\" }] }] }, \"spec_keywords\": { \"match\": \"\\\\b(global|pack|unpack|pragma|native|include|ensures|requires|invariant|apply|aborts_if|modifies)\\\\b\", \"name\": \"keyword.control.move.spec\" }, \"spec_types\": { \"comment\": \"Spec-only types\", \"match\": \"\\\\b(range|num|vector|bool|u8|u16|u32|u64|u128|u256|address)\\\\b\", \"name\": \"support.type.vector.move\" }, \"struct\": { \"begin\": \"\\\\b(struct)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"end\": \"(?<=[};])\", \"name\": \"meta.struct.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"begin\": \"(?<=struct)\", \"comment\": \"Struct definition\", \"end\": \"(?=[;{])\", \"name\": \"meta.struct.definition.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#has\" }, { \"include\": \"#abilities\" }, { \"comment\": \"Struct name (ident)\", \"match\": \"\\\\b[A-Z][a-zA-Z_0-9]*\\\\b\", \"name\": \"entity.name.type.struct.move\" }, { \"begin\": \"\\\\(\", \"comment\": \"Simple struct\", \"end\": \"\\\\)\", \"name\": \"meta.struct.paren.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }] }, { \"include\": \"#type_param\" }] }, { \"begin\": \"\\\\(\", \"comment\": \"Simple struct\", \"end\": \"\\\\)\", \"name\": \"meta.struct.paren.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#types\" }] }, { \"begin\": \"{\", \"comment\": \"Struct body\", \"end\": \"}\", \"name\": \"meta.struct.body.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#self_access\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#module_access\" }, { \"include\": \"#expr_generic\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }] }] }, \"struct_pack\": { \"begin\": \"(?<=[A-Za-z0-9_>])\\\\s*{\", \"comment\": \"Struct { field: value... }; identified as generic / ident followed by curly's\", \"end\": \"}\", \"name\": \"meta.struct.pack.move\", \"patterns\": [{ \"include\": \"#comments\" }] }, \"type_param\": { \"begin\": \"<\", \"comment\": \"Generic type param\", \"end\": \">\", \"name\": \"meta.generic_param.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#phantom\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#module_access\" }, { \"include\": \"#abilities\" }] }, \"types\": { \"comment\": \"Built-in types + vector\", \"name\": \"meta.types.move\", \"patterns\": [{ \"include\": \"#primitives\" }, { \"include\": \"#vector\" }] }, \"use_fun\": { \"begin\": \"\\\\b(fun)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.fun.move\" } }, \"comment\": \"use { fun } internals\", \"end\": \"(?=;)\", \"name\": \"meta.import.fun.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"comment\": \"as keyword\", \"match\": \"\\\\b(as)\\\\b\", \"name\": \"keyword.control.as.move\" }, { \"comment\": \"Self keyword\", \"match\": \"\\\\b(Self)\\\\b\", \"name\": \"variable.language.self.use.fun.move\" }, { \"comment\": \"Function name\", \"match\": \"\\\\b(_______[a-z][a-z_0-9]+)\\\\b\", \"name\": \"entity.name.function.use.move\" }, { \"include\": \"#types\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#capitalized\" }] }, \"vector\": { \"comment\": \"vector type\", \"match\": \"\\\\b(vector)\\\\b\", \"name\": \"support.type.vector.move\" } }, \"scopeName\": \"source.move\" });\nvar move = [\n  lang\n];\n\nexport { move as default };\n"],
  "mappings": "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",
  "names": []
}
