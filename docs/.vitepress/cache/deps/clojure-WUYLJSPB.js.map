{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/shiki@1.3.0/node_modules/shiki/dist/langs/clojure.mjs"],
  "sourcesContent": ["const lang = Object.freeze({ \"displayName\": \"Clojure\", \"name\": \"clojure\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#shebang-comment\" }, { \"include\": \"#quoted-sexp\" }, { \"include\": \"#sexp\" }, { \"include\": \"#keyfn\" }, { \"include\": \"#string\" }, { \"include\": \"#vector\" }, { \"include\": \"#set\" }, { \"include\": \"#map\" }, { \"include\": \"#regexp\" }, { \"include\": \"#var\" }, { \"include\": \"#constants\" }, { \"include\": \"#dynamic-variables\" }, { \"include\": \"#metadata\" }, { \"include\": \"#namespace-symbol\" }, { \"include\": \"#symbol\" }], \"repository\": { \"comment\": { \"begin\": \"(?<!\\\\\\\\);\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.clojure\" } }, \"end\": \"$\", \"name\": \"comment.line.semicolon.clojure\" }, \"constants\": { \"patterns\": [{ \"match\": \"(nil)(?=(\\\\s|\\\\)|\\\\]|\\\\}))\", \"name\": \"constant.language.nil.clojure\" }, { \"match\": \"(true|false)\", \"name\": \"constant.language.boolean.clojure\" }, { \"match\": \"(##(?:Inf|-Inf|NaN))\", \"name\": \"constant.numeric.symbol.clojure\" }, { \"match\": \"([-+]?\\\\d+/\\\\d+)\", \"name\": \"constant.numeric.ratio.clojure\" }, { \"match\": \"([-+]?(?:(?:3[0-6])|(?:[12]\\\\d)|[2-9])[rR][0-9A-Za-z]+N?)\", \"name\": \"constant.numeric.arbitrary-radix.clojure\" }, { \"match\": \"([-+]?0[xX][0-9a-fA-F]+N?)\", \"name\": \"constant.numeric.hexadecimal.clojure\" }, { \"match\": \"([-+]?0[0-7]+N?)\", \"name\": \"constant.numeric.octal.clojure\" }, { \"match\": \"([-+]?[0-9]+(?:(\\\\.|(?=[eEM]))[0-9]*([eE][-+]?[0-9]+)?)M?)\", \"name\": \"constant.numeric.double.clojure\" }, { \"match\": \"([-+]?\\\\d+N?)\", \"name\": \"constant.numeric.long.clojure\" }, { \"include\": \"#keyword\" }] }, \"dynamic-variables\": { \"match\": \"\\\\*[\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\d]+\\\\*\", \"name\": \"meta.symbol.dynamic.clojure\" }, \"keyfn\": { \"patterns\": [{ \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{))(if(-[-\\\\p{Ll}\\\\?]*)?|when(-[-\\\\p{Ll}]*)?|for(-[-\\\\p{Ll}]*)?|cond|do|let(-[-\\\\p{Ll}\\\\?]*)?|binding|loop|recur|fn|throw[\\\\p{Ll}\\\\-]*|try|catch|finally|([\\\\p{Ll}]*case))(?=(\\\\s|\\\\)|\\\\]|\\\\}))\", \"name\": \"storage.control.clojure\" }, { \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{))(declare-?|(in-)?ns|import|use|require|load|compile|(def[\\\\p{Ll}\\\\-]*))(?=(\\\\s|\\\\)|\\\\]|\\\\}))\", \"name\": \"keyword.control.clojure\" }] }, \"keyword\": { \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{)):[\\\\w\\\\#\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\/\\\\!\\\\?\\\\*]+(?=(\\\\s|\\\\)|\\\\]|\\\\}|\\\\,))\", \"name\": \"constant.keyword.clojure\" }, \"map\": { \"begin\": \"(\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.map.begin.clojure\" } }, \"end\": \"(\\\\}(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.map.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.map.end.clojure\" } }, \"name\": \"meta.map.clojure\", \"patterns\": [{ \"include\": \"$self\" }] }, \"metadata\": { \"patterns\": [{ \"begin\": \"(\\\\^\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.metadata.map.begin.clojure\" } }, \"end\": \"(\\\\}(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.metadata.map.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.metadata.map.end.clojure\" } }, \"name\": \"meta.metadata.map.clojure\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"(\\\\^)\", \"end\": \"(\\\\s)\", \"name\": \"meta.metadata.simple.clojure\", \"patterns\": [{ \"include\": \"#keyword\" }, { \"include\": \"$self\" }] }] }, \"namespace-symbol\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"meta.symbol.namespace.clojure\" } }, \"match\": \"([\\\\p{L}\\\\.\\\\-\\\\_\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*][\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*\\\\d]*)/\" }] }, \"quoted-sexp\": { \"begin\": \"(['``]\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.begin.clojure\" } }, \"end\": \"(\\\\))$|(\\\\)(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.expression.end.trailing.clojure\" }, \"3\": { \"name\": \"punctuation.section.expression.end.clojure\" } }, \"name\": \"meta.quoted-expression.clojure\", \"patterns\": [{ \"include\": \"$self\" }] }, \"regexp\": { \"begin\": '#\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.regexp.begin.clojure\" } }, \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.regexp.end.clojure\" } }, \"name\": \"string.regexp.clojure\", \"patterns\": [{ \"include\": \"#regexp_escaped_char\" }] }, \"regexp_escaped_char\": { \"match\": \"\\\\\\\\.\", \"name\": \"constant.character.escape.clojure\" }, \"set\": { \"begin\": \"(\\\\#\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.set.begin.clojure\" } }, \"end\": \"(\\\\}(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.set.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.set.end.clojure\" } }, \"name\": \"meta.set.clojure\", \"patterns\": [{ \"include\": \"$self\" }] }, \"sexp\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.begin.clojure\" } }, \"end\": \"(\\\\))$|(\\\\)(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.expression.end.trailing.clojure\" }, \"3\": { \"name\": \"punctuation.section.expression.end.clojure\" } }, \"name\": \"meta.expression.clojure\", \"patterns\": [{ \"begin\": \"(?<=\\\\()(ns|declare|def[\\\\w\\\\d._:+=><!?*-]*|[\\\\w._:+=><!?*-][\\\\w\\\\d._:+=><!?*-]*/def[\\\\w\\\\d._:+=><!?*-]*)\\\\s+\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.clojure\" } }, \"end\": \"(?=\\\\))\", \"name\": \"meta.definition.global.clojure\", \"patterns\": [{ \"include\": \"#metadata\" }, { \"include\": \"#dynamic-variables\" }, { \"match\": \"([\\\\p{L}\\\\.\\\\-\\\\_\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*][\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*\\\\d]*)\", \"name\": \"entity.global.clojure\" }, { \"include\": \"$self\" }] }, { \"include\": \"#keyfn\" }, { \"include\": \"#constants\" }, { \"include\": \"#vector\" }, { \"include\": \"#map\" }, { \"include\": \"#set\" }, { \"include\": \"#sexp\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.function.clojure\" } }, \"match\": \"(?<=\\\\()(.+?)(?=\\\\s|\\\\))\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }, \"shebang-comment\": { \"begin\": \"^(#!)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.shebang.clojure\" } }, \"end\": \"$\", \"name\": \"comment.line.shebang.clojure\" }, \"string\": { \"begin\": '(?<!\\\\\\\\)(\")', \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.begin.clojure\" } }, \"end\": '(\")', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.clojure\" } }, \"name\": \"string.quoted.double.clojure\", \"patterns\": [{ \"match\": \"\\\\\\\\.\", \"name\": \"constant.character.escape.clojure\" }] }, \"symbol\": { \"patterns\": [{ \"match\": \"([\\\\p{L}\\\\.\\\\-\\\\_\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*][\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*\\\\d]*)\", \"name\": \"meta.symbol.clojure\" }] }, \"var\": { \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{)\\\\#)'[\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\/\\\\!\\\\?\\\\*]+(?=(\\\\s|\\\\)|\\\\]|\\\\}))\", \"name\": \"meta.var.clojure\" }, \"vector\": { \"begin\": \"(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.vector.begin.clojure\" } }, \"end\": \"(\\\\](?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.vector.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.vector.end.clojure\" } }, \"name\": \"meta.vector.clojure\", \"patterns\": [{ \"include\": \"$self\" }] } }, \"scopeName\": \"source.clojure\", \"aliases\": [\"clj\"] });\nvar clojure = [\n  lang\n];\n\nexport { clojure as default };\n"],
  "mappings": "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",
  "names": []
}
